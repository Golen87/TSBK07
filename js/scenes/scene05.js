var scene05 = new Scene(function() {
	clearPhysics();
	models = [];
	portals = [];

	// Init models
	var ground = new Model( objects.ground, texture_prog );
	ground.setTexture( loadTexture(gl, "tex/grass_lab.png") );
	ground.setGLSetting( gl.CULL_FACE, true );
	ground.frustumCulling = false;
	mat4.translate(	ground.modelMatrix, ground.modelMatrix, [0.0, 0.0, 0.0] );
	mat3.normalFromMat4( ground.normalMatrix, ground.modelMatrix );
	models.push( ground );

	var groundShape = new CANNON.Plane();
	var groundRotation = new CANNON.Quaternion();
	groundRotation.setFromAxisAngle (new CANNON.Vec3(1, 0, 0), -0.5 * Math.PI);
	initStaticBoxBody(groundShape, [0, 0, 0], groundRotation);


	var maze = [[0, 0], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 20], [0, 21], [0, 22], [0, 23], [0, 24], [0, 25], [0, 26], [0, 27], [0, 28], [0, 29], [0, 30], [1, 0], [1, 3], [1, 9], [1, 21], [1, 30], [2, 0], [2, 3], [2, 9], [2, 21], [2, 30], [3, 0], [3, 3], [3, 4], [3, 5], [3, 6], [3, 9], [3, 10], [3, 11], [3, 12], [3, 13], [3, 14], [3, 15], [3, 18], [3, 21], [3, 24], [3, 27], [3, 28], [3, 29], [3, 30], [4, 0], [4, 3], [4, 6], [4, 12], [4, 18], [4, 24], [4, 30], [5, 0], [5, 3], [5, 6], [5, 12], [5, 18], [5, 24], [5, 30], [6, 0], [6, 3], [6, 6], [6, 9], [6, 10], [6, 11], [6, 12], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [6, 20], [6, 21], [6, 22], [6, 23], [6, 24], [6, 25], [6, 26], [6, 27], [6, 30], [7, 0], [7, 15], [7, 30], [8, 0], [8, 15], [8, 30], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9], [9, 10], [9, 11], [9, 12], [9, 15], [9, 16], [9, 17], [9, 18], [9, 21], [9, 24], [9, 27], [9, 28], [9, 29], [9, 30], [10, 0], [10, 15], [10, 21], [10, 24], [10, 30], [11, 0], [11, 15], [11, 21], [11, 24], [11, 30], [12, 0], [12, 1], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 9], [12, 12], [12, 13], [12, 14], [12, 15], [12, 18], [12, 19], [12, 20], [12, 21], [12, 24], [12, 25], [12, 26], [12, 27], [12, 28], [12, 29], [12, 30], [13, 0], [13, 3], [13, 9], [13, 12], [13, 18], [13, 24], [13, 30], [14, 0], [14, 3], [14, 9], [14, 12], [14, 18], [14, 24], [14, 30], [15, 0], [15, 3], [15, 4], [15, 5], [15, 6], [15, 7], [15, 8], [15, 9], [15, 10], [15, 11], [15, 12], [15, 15], [15, 16], [15, 17], [15, 18], [15, 21], [15, 24], [15, 27], [15, 28], [15, 29], [15, 30], [16, 0], [16, 3], [16, 15], [16, 21], [16, 30], [17, 0], [17, 3], [17, 15], [17, 21], [17, 30], [18, 0], [18, 3], [18, 6], [18, 9], [18, 12], [18, 15], [18, 18], [18, 21], [18, 24], [18, 27], [18, 30], [19, 0], [19, 3], [19, 6], [19, 9], [19, 12], [19, 15], [19, 18], [19, 21], [19, 24], [19, 27], [19, 30], [20, 0], [20, 3], [20, 6], [20, 9], [20, 12], [20, 15], [20, 18], [20, 21], [20, 24], [20, 27], [20, 30], [21, 0], [21, 3], [21, 4], [21, 5], [21, 6], [21, 9], [21, 12], [21, 15], [21, 16], [21, 17], [21, 18], [21, 21], [21, 22], [21, 23], [21, 24], [21, 27], [21, 30], [22, 0], [22, 9], [22, 12], [22, 18], [22, 21], [22, 27], [22, 30], [23, 0], [23, 9], [23, 12], [23, 18], [23, 21], [23, 27], [23, 30], [24, 0], [24, 1], [24, 2], [24, 3], [24, 4], [24, 5], [24, 6], [24, 7], [24, 8], [24, 9], [24, 12], [24, 13], [24, 14], [24, 15], [24, 16], [24, 17], [24, 18], [24, 21], [24, 22], [24, 23], [24, 24], [24, 25], [24, 26], [24, 27], [24, 30], [25, 0], [25, 6], [25, 15], [25, 18], [25, 21], [25, 30], [26, 0], [26, 6], [26, 15], [26, 18], [26, 21], [26, 30], [27, 0], [27, 3], [27, 6], [27, 9], [27, 10], [27, 11], [27, 12], [27, 13], [27, 14], [27, 15], [27, 18], [27, 19], [27, 20], [27, 21], [27, 22], [27, 23], [27, 24], [27, 27], [27, 30], [28, 0], [28, 3], [28, 9], [28, 27], [28, 30], [29, 0], [29, 3], [29, 9], [29, 27], [29, 30], [30, 0], [30, 3], [30, 4], [30, 5], [30, 6], [30, 7], [30, 8], [30, 9], [30, 10], [30, 11], [30, 12], [30, 13], [30, 14], [30, 15], [30, 16], [30, 17], [30, 18], [30, 19], [30, 20], [30, 21], [30, 22], [30, 23], [30, 24], [30, 25], [30, 26], [30, 27], [30, 28], [30, 29], [30, 30]];

	for (var i = 0; i < maze.length; i++) {
		var p = maze[i];
		var scale = [0.3, 0.5, 0.3];
		var pos = [
			scale[0] * 2 * p[0],
			scale[1] / 2,
			scale[2] * 2 * p[1],
		];

		var cube = new Model( objects.cube, normal_prog );
		cube.setGLSetting( gl.CULL_FACE, true );
		mat4.translate( cube.modelMatrix, cube.modelMatrix, pos );
		mat4.scale( cube.modelMatrix, cube.modelMatrix, scale );
		mat3.normalFromMat4( cube.normalMatrix, cube.modelMatrix );
		cube.sphereRadius = Math.sqrt(3.0);
		models.push( cube );
	}

	// Player
	playerCamera = new PlayerCamera(vec3.fromValues(0.0, 1.46, 0.0), 0);
});